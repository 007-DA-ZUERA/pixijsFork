{"version":3,"file":"triangulateWithHoles.mjs","sources":["../../../../../src/scene/graphics/shared/utils/triangulateWithHoles.ts"],"sourcesContent":["import { getTriangleInstance } from './triangleInstance';\n\n/**\n * @param points\n * @param holes\n * @param vertices\n * @param verticesStride\n * @param verticesOffset\n * @param indices\n * @param indicesOffset\n * @internal\n */\nexport function triangulateWithHoles(\n    points: number[],\n    holes: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangle = getTriangleInstance();\n\n    if (!triangle)\n    {\n        console.error('Triangle-wasm not initialized');\n\n        return;\n    }\n\n    // Convert points array to vertices format (x, y pairs)\n    const numPoints = points.length / 2;\n    const pointIndices = [];\n\n    for (let i = 0; i < numPoints; i++)\n    {\n        pointIndices.push(i);\n    }\n\n    // Prepare input data for triangle-wasm\n    const input = {\n        pointlist: points,\n        numberofpoints: numPoints,\n        segmentlist: [] as number[],\n        numberofsegments: 0,\n        holelist: [] as number[],\n        numberofholes: 0,\n    };\n\n    // Add segments (edges) to form the outline\n    for (let i = 0; i < numPoints; i++)\n    {\n        input.segmentlist.push(i, (i + 1) % numPoints);\n    }\n    input.numberofsegments = numPoints;\n\n    // Add holes if provided\n    if (holes && holes.length > 0)\n    {\n        for (let i = 0; i < holes.length; i += 2)\n        {\n            input.holelist.push(holes[i], holes[i + 1]);\n        }\n        input.numberofholes = holes.length / 2;\n    }\n\n    // Triangulate\n    const output = triangle.triangulate(input, 'pzQ');\n\n    if (!output || !output.trianglelist)\n    {\n        return;\n    }\n\n    // Write triangulated indices\n    for (let i = 0; i < output.trianglelist.length; i += 3)\n    {\n        indices[indicesOffset++] = (output.trianglelist[i] + verticesOffset);\n        indices[indicesOffset++] = (output.trianglelist[i + 1] + verticesOffset);\n        indices[indicesOffset++] = (output.trianglelist[i + 2] + verticesOffset);\n    }\n\n    // Write vertices\n    let index = verticesOffset * verticesStride;\n\n    for (let i = 0; i < points.length; i += 2)\n    {\n        vertices[index] = points[i];\n        vertices[index + 1] = points[i + 1];\n\n        index += verticesStride;\n    }\n}\n\n"],"names":[],"mappings":";;;AAYO,SAAS,qBACZ,MACA,EAAA,KAAA,EACA,UACA,cACA,EAAA,cAAA,EAEA,SACA,aAEJ,EAAA;AACI,EAAA,MAAM,WAAW,mBAAoB,EAAA,CAAA;AAErC,EAAA,IAAI,CAAC,QACL,EAAA;AACI,IAAA,OAAA,CAAQ,MAAM,+BAA+B,CAAA,CAAA;AAE7C,IAAA,OAAA;AAAA,GACJ;AAGA,EAAM,MAAA,SAAA,GAAY,OAAO,MAAS,GAAA,CAAA,CAAA;AAClC,EAAA,MAAM,eAAe,EAAC,CAAA;AAEtB,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,SAAA,EAAW,CAC/B,EAAA,EAAA;AACI,IAAA,YAAA,CAAa,KAAK,CAAC,CAAA,CAAA;AAAA,GACvB;AAGA,EAAA,MAAM,KAAQ,GAAA;AAAA,IACV,SAAW,EAAA,MAAA;AAAA,IACX,cAAgB,EAAA,SAAA;AAAA,IAChB,aAAa,EAAC;AAAA,IACd,gBAAkB,EAAA,CAAA;AAAA,IAClB,UAAU,EAAC;AAAA,IACX,aAAe,EAAA,CAAA;AAAA,GACnB,CAAA;AAGA,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,SAAA,EAAW,CAC/B,EAAA,EAAA;AACI,IAAA,KAAA,CAAM,WAAY,CAAA,IAAA,CAAK,CAAI,EAAA,CAAA,CAAA,GAAI,KAAK,SAAS,CAAA,CAAA;AAAA,GACjD;AACA,EAAA,KAAA,CAAM,gBAAmB,GAAA,SAAA,CAAA;AAGzB,EAAI,IAAA,KAAA,IAAS,KAAM,CAAA,MAAA,GAAS,CAC5B,EAAA;AACI,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,EAAQ,KAAK,CACvC,EAAA;AACI,MAAM,KAAA,CAAA,QAAA,CAAS,KAAK,KAAM,CAAA,CAAC,GAAG,KAAM,CAAA,CAAA,GAAI,CAAC,CAAC,CAAA,CAAA;AAAA,KAC9C;AACA,IAAM,KAAA,CAAA,aAAA,GAAgB,MAAM,MAAS,GAAA,CAAA,CAAA;AAAA,GACzC;AAGA,EAAA,MAAM,MAAS,GAAA,QAAA,CAAS,WAAY,CAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AAEhD,EAAA,IAAI,CAAC,MAAA,IAAU,CAAC,MAAA,CAAO,YACvB,EAAA;AACI,IAAA,OAAA;AAAA,GACJ;AAGA,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,OAAO,YAAa,CAAA,MAAA,EAAQ,KAAK,CACrD,EAAA;AACI,IAAA,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAK,MAAO,CAAA,YAAA,CAAa,CAAC,CAAI,GAAA,cAAA,CAAA;AACrD,IAAA,OAAA,CAAQ,eAAe,CAAK,GAAA,MAAA,CAAO,YAAa,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;AACzD,IAAA,OAAA,CAAQ,eAAe,CAAK,GAAA,MAAA,CAAO,YAAa,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;AAAA,GAC7D;AAGA,EAAA,IAAI,QAAQ,cAAiB,GAAA,cAAA,CAAA;AAE7B,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,MAAA,EAAQ,KAAK,CACxC,EAAA;AACI,IAAS,QAAA,CAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAC1B,IAAA,QAAA,CAAS,KAAQ,GAAA,CAAC,CAAI,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA;AAElC,IAAS,KAAA,IAAA,cAAA,CAAA;AAAA,GACb;AACJ;;;;"}