{"version":3,"file":"triangulateWithHoles.mjs","sources":["../../../../../src/scene/graphics/shared/utils/triangulateWithHoles.ts"],"sourcesContent":["import { getTriangleInstance } from './triangleInstance';\n\n/**\n * @param points\n * @param holes\n * @param vertices\n * @param verticesStride\n * @param verticesOffset\n * @param indices\n * @param indicesOffset\n * @internal\n */\nexport function triangulateWithHoles(\n    points: number[],\n    holes: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangle = getTriangleInstance();\n\n    if (!triangle)\n    {\n        console.error('Triangle-wasm not initialized');\n\n        return;\n    }\n\n    const numPoints = points.length / 2;\n\n    // Build segment list (edges connecting consecutive points)\n    const segmentlist: number[] = [];\n\n    for (let i = 0; i < numPoints; i++)\n    {\n        segmentlist.push(i, (i + 1) % numPoints);\n    }\n\n    // Build hole list (x, y coordinates for each hole)\n    const holelist: number[] = [];\n\n    if (holes && holes.length > 0)\n    {\n        for (let i = 0; i < holes.length; i += 2)\n        {\n            holelist.push(holes[i], holes[i + 1]);\n        }\n    }\n\n    // Create input/output objects using triangle-wasm's makeIO function\n    const input = triangle.makeIO({\n        pointlist: points,\n        numberofpoints: numPoints,\n        segmentlist,\n        numberofsegments: segmentlist.length / 2,\n        holelist,\n        numberofholes: holelist.length / 2,\n    });\n\n    const output = triangle.makeIO();\n\n    try\n    {\n        // Triangulate with switches: p=planar straight line graph, z=zero-based indexing, Q=quiet\n        triangle.triangulate('pzQ', input, output);\n\n        if (!output.trianglelist || output.trianglelist.length === 0)\n        {\n            return;\n        }\n\n        // Write triangulated indices\n        for (let i = 0; i < output.trianglelist.length; i += 3)\n        {\n            indices[indicesOffset++] = output.trianglelist[i] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 1] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 2] + verticesOffset;\n        }\n\n        // Write vertices\n        let index = verticesOffset * verticesStride;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[index] = points[i];\n            vertices[index + 1] = points[i + 1];\n\n            index += verticesStride;\n        }\n    }\n    finally\n    {\n        // Clean up allocated memory\n        triangle.freeIO(input);\n        triangle.freeIO(output);\n    }\n}\n\n"],"names":[],"mappings":";;;AAYO,SAAS,qBACZ,MACA,EAAA,KAAA,EACA,UACA,cACA,EAAA,cAAA,EAEA,SACA,aAEJ,EAAA;AACI,EAAA,MAAM,WAAW,mBAAoB,EAAA,CAAA;AAErC,EAAA,IAAI,CAAC,QACL,EAAA;AACI,IAAA,OAAA,CAAQ,MAAM,+BAA+B,CAAA,CAAA;AAE7C,IAAA,OAAA;AAAA,GACJ;AAEA,EAAM,MAAA,SAAA,GAAY,OAAO,MAAS,GAAA,CAAA,CAAA;AAGlC,EAAA,MAAM,cAAwB,EAAC,CAAA;AAE/B,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,SAAA,EAAW,CAC/B,EAAA,EAAA;AACI,IAAA,WAAA,CAAY,IAAK,CAAA,CAAA,EAAA,CAAI,CAAI,GAAA,CAAA,IAAK,SAAS,CAAA,CAAA;AAAA,GAC3C;AAGA,EAAA,MAAM,WAAqB,EAAC,CAAA;AAE5B,EAAI,IAAA,KAAA,IAAS,KAAM,CAAA,MAAA,GAAS,CAC5B,EAAA;AACI,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,EAAQ,KAAK,CACvC,EAAA;AACI,MAAA,QAAA,CAAS,KAAK,KAAM,CAAA,CAAC,GAAG,KAAM,CAAA,CAAA,GAAI,CAAC,CAAC,CAAA,CAAA;AAAA,KACxC;AAAA,GACJ;AAGA,EAAM,MAAA,KAAA,GAAQ,SAAS,MAAO,CAAA;AAAA,IAC1B,SAAW,EAAA,MAAA;AAAA,IACX,cAAgB,EAAA,SAAA;AAAA,IAChB,WAAA;AAAA,IACA,gBAAA,EAAkB,YAAY,MAAS,GAAA,CAAA;AAAA,IACvC,QAAA;AAAA,IACA,aAAA,EAAe,SAAS,MAAS,GAAA,CAAA;AAAA,GACpC,CAAA,CAAA;AAED,EAAM,MAAA,MAAA,GAAS,SAAS,MAAO,EAAA,CAAA;AAE/B,EACA,IAAA;AAEI,IAAS,QAAA,CAAA,WAAA,CAAY,KAAO,EAAA,KAAA,EAAO,MAAM,CAAA,CAAA;AAEzC,IAAA,IAAI,CAAC,MAAO,CAAA,YAAA,IAAgB,MAAO,CAAA,YAAA,CAAa,WAAW,CAC3D,EAAA;AACI,MAAA,OAAA;AAAA,KACJ;AAGA,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,OAAO,YAAa,CAAA,MAAA,EAAQ,KAAK,CACrD,EAAA;AACI,MAAA,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAI,MAAO,CAAA,YAAA,CAAa,CAAC,CAAI,GAAA,cAAA,CAAA;AACpD,MAAA,OAAA,CAAQ,eAAe,CAAI,GAAA,MAAA,CAAO,YAAa,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;AACxD,MAAA,OAAA,CAAQ,eAAe,CAAI,GAAA,MAAA,CAAO,YAAa,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;AAAA,KAC5D;AAGA,IAAA,IAAI,QAAQ,cAAiB,GAAA,cAAA,CAAA;AAE7B,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,MAAA,EAAQ,KAAK,CACxC,EAAA;AACI,MAAS,QAAA,CAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAC1B,MAAA,QAAA,CAAS,KAAQ,GAAA,CAAC,CAAI,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA;AAElC,MAAS,KAAA,IAAA,cAAA,CAAA;AAAA,KACb;AAAA,GAEJ,SAAA;AAGI,IAAA,QAAA,CAAS,OAAO,KAAK,CAAA,CAAA;AACrB,IAAA,QAAA,CAAS,OAAO,MAAM,CAAA,CAAA;AAAA,GAC1B;AACJ;;;;"}