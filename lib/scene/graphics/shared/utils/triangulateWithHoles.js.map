{"version":3,"file":"triangulateWithHoles.js","sources":["../../../../../src/scene/graphics/shared/utils/triangulateWithHoles.ts"],"sourcesContent":["import { getTriangleInstance } from './triangleInstance';\n\n/**\n * Convert hole indices to hole list coordinates\n * @param pointlist - flat array of x,y coordinates\n * @param holeIndices - array of point indices where holes are located\n * @param nudgeIfOnBoundary - whether to nudge hole points slightly to avoid boundary issues\n * @param nudgeEpsilon - epsilon value for nudging\n */\nfunction holeIndicesToHoleList(\n    pointlist: number[],\n    holeIndices: number[],\n    nudgeIfOnBoundary = false,\n    nudgeEpsilon = 1e-9\n): number[]\n{\n    const out: number[] = [];\n    const nPoints = pointlist.length / 2;\n\n    for (const idx of holeIndices)\n    {\n        if (!Number.isInteger(idx) || idx < 0 || idx >= nPoints)\n        {\n            throw new RangeError(`hole index ${idx} out of bounds`);\n        }\n\n        let x = pointlist[idx * 2];\n        let y = pointlist[idx * 2 + 1];\n\n        // Optional tiny deterministic nudge to avoid exact-on-edge/vertex issues\n        if (nudgeIfOnBoundary)\n        {\n            x = x + (nudgeEpsilon * ((idx % 2 === 0) ? 1 : -1));\n            y = y + (nudgeEpsilon * ((idx % 3 === 0) ? 1 : -1));\n        }\n\n        out.push(x, y);\n    }\n\n    return out;\n}\n\n/**\n * @param points\n * @param holes\n * @param vertices\n * @param verticesStride\n * @param verticesOffset\n * @param indices\n * @param indicesOffset\n * @internal\n */\nexport function triangulateWithHoles(\n    points: number[],\n    holeIndices: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangle = getTriangleInstance();\n\n    if (!triangle)\n    {\n        console.error('Triangle-wasm not initialized');\n\n        return;\n    }\n\n    // Convert hole indices to hole list coordinates\n    const holelist = holeIndices.length > 0\n        ? holeIndicesToHoleList(points, holeIndices, true, 1e-6)\n        : [];\n\n    const numPoints = points.length / 2;\n\n    // Build segment list (edges connecting consecutive points to form closed boundary)\n    const segmentlist: number[] = [];\n\n    for (let i = 0; i < numPoints; i++)\n    {\n        segmentlist.push(i, (i + 1) % numPoints);\n    }\n\n    // Create input/output objects using triangle-wasm's makeIO function\n    const input = triangle.makeIO({\n        pointlist: points,\n        segmentlist,\n        holelist,\n    });\n\n    const output = triangle.makeIO();\n\n    try\n    {\n        // Triangulate with switches: p=planar straight line graph, z=zero-based indexing, Q=quiet\n        triangle.triangulate({quality: true}, input, output);\n\n        if (!output.trianglelist || output.trianglelist.length === 0)\n        {\n\n            console.log(\"Oh shit\")\n            return;\n        }\n\n\n        console.log(\"triangulating :D\")\n        // Write triangulated indices\n        for (let i = 0; i < output.trianglelist.length; i += 3)\n        {\n            indices[indicesOffset++] = output.trianglelist[i] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 1] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 2] + verticesOffset;\n        }\n\n        // Write vertices\n        let index = verticesOffset * verticesStride;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[index] = points[i];\n            vertices[index + 1] = points[i + 1];\n\n            index += verticesStride;\n        }\n    }\n    finally\n    {\n        // Clean up allocated memory\n        // Use 'destroy all' (true) on input to free shared pointers, then free output normally\n        // This avoids double-free issues since Triangle copies pointers from input to output\n        triangle.freeIO(input, true);\n        triangle.freeIO(output);\n    }\n}\n\n"],"names":["getTriangleInstance"],"mappings":"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"}