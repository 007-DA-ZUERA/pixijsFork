{"version":3,"file":"triangulateWithHoles.js","sources":["../../../../../src/scene/graphics/shared/utils/triangulateWithHoles.ts"],"sourcesContent":["import { getTriangleInstance } from './triangleInstance';\n\n/**\n * @param points\n * @param holes\n * @param vertices\n * @param verticesStride\n * @param verticesOffset\n * @param indices\n * @param indicesOffset\n * @internal\n */\nexport function triangulateWithHoles(\n    points: number[],\n    _holes: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangle = getTriangleInstance();\n\n    if (!triangle)\n    {\n        console.error('Triangle-wasm not initialized');\n\n        return;\n    }\n\n    // Create input/output objects using triangle-wasm's makeIO function\n    const input = triangle.makeIO({\n        pointlist: points,\n    });\n\n    const output = triangle.makeIO();\n\n    try\n    {\n        // Triangulate with switches: p=planar straight line graph, z=zero-based indexing, Q=quiet\n        triangle.triangulate({quality: true}, input, output);\n\n        if (!output.trianglelist || output.trianglelist.length === 0)\n        {\n            return;\n        }\n\n        // Write triangulated indices\n        for (let i = 0; i < output.trianglelist.length; i += 3)\n        {\n            indices[indicesOffset++] = output.trianglelist[i] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 1] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 2] + verticesOffset;\n        }\n\n        // Write vertices\n        let index = verticesOffset * verticesStride;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[index] = points[i];\n            vertices[index + 1] = points[i + 1];\n\n            index += verticesStride;\n        }\n    }\n    finally\n    {\n        // Clean up allocated memory\n        // Use 'destroy all' (true) on input to free shared pointers, then free output normally\n        // This avoids double-free issues since Triangle copies pointers from input to output\n        triangle.freeIO(input, true);\n        triangle.freeIO(output);\n    }\n}\n\n"],"names":["getTriangleInstance"],"mappings":";;;;;AAYO,SAAS,qBACZ,MACA,EAAA,MAAA,EACA,UACA,cACA,EAAA,cAAA,EAEA,SACA,aAEJ,EAAA;AACI,EAAA,MAAM,WAAWA,oCAAoB,EAAA,CAAA;AAErC,EAAA,IAAI,CAAC,QACL,EAAA;AACI,IAAA,OAAA,CAAQ,MAAM,+BAA+B,CAAA,CAAA;AAE7C,IAAA,OAAA;AAAA,GACJ;AAGA,EAAM,MAAA,KAAA,GAAQ,SAAS,MAAO,CAAA;AAAA,IAC1B,SAAW,EAAA,MAAA;AAAA,GACd,CAAA,CAAA;AAED,EAAM,MAAA,MAAA,GAAS,SAAS,MAAO,EAAA,CAAA;AAE/B,EACA,IAAA;AAEI,IAAA,QAAA,CAAS,YAAY,EAAC,OAAA,EAAS,IAAI,EAAA,EAAG,OAAO,MAAM,CAAA,CAAA;AAEnD,IAAA,IAAI,CAAC,MAAO,CAAA,YAAA,IAAgB,MAAO,CAAA,YAAA,CAAa,WAAW,CAC3D,EAAA;AACI,MAAA,OAAA;AAAA,KACJ;AAGA,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,OAAO,YAAa,CAAA,MAAA,EAAQ,KAAK,CACrD,EAAA;AACI,MAAA,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAI,MAAO,CAAA,YAAA,CAAa,CAAC,CAAI,GAAA,cAAA,CAAA;AACpD,MAAA,OAAA,CAAQ,eAAe,CAAI,GAAA,MAAA,CAAO,YAAa,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;AACxD,MAAA,OAAA,CAAQ,eAAe,CAAI,GAAA,MAAA,CAAO,YAAa,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;AAAA,KAC5D;AAGA,IAAA,IAAI,QAAQ,cAAiB,GAAA,cAAA,CAAA;AAE7B,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,MAAA,EAAQ,KAAK,CACxC,EAAA;AACI,MAAS,QAAA,CAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAC1B,MAAA,QAAA,CAAS,KAAQ,GAAA,CAAC,CAAI,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA;AAElC,MAAS,KAAA,IAAA,cAAA,CAAA;AAAA,KACb;AAAA,GAEJ,SAAA;AAKI,IAAS,QAAA,CAAA,MAAA,CAAO,OAAO,IAAI,CAAA,CAAA;AAC3B,IAAA,QAAA,CAAS,OAAO,MAAM,CAAA,CAAA;AAAA,GAC1B;AACJ;;;;"}