{"version":3,"file":"triangulateWithHoles.js","sources":["../../../../../src/scene/graphics/shared/utils/triangulateWithHoles.ts"],"sourcesContent":["import { getTriangleInstance } from './triangleInstance';\n\n/**\n * Convert hole indices to hole list coordinates\n * @param pointlist - flat array of x,y coordinates\n * @param holeIndices - array of point indices where holes are located\n * @param nudgeIfOnBoundary - whether to nudge hole points slightly to avoid boundary issues\n * @param nudgeEpsilon - epsilon value for nudging\n */\n// Simple point-in-polygon (ray casting)\nfunction pointInPolygon(x: number, y: number, ring: number[]): boolean\n{\n    let inside = false;\n    const n = ring.length / 2;\n\n    for (let i = 0, j = n - 1; i < n; j = i++)\n    {\n        const xi = ring[i * 2];\n        const yi = ring[i * 2 + 1];\n        const xj = ring[j * 2];\n        const yj = ring[j * 2 + 1];\n\n        const intersect = ((yi > y) !== (yj > y))\n            && (x < ((xj - xi) * (y - yi)) / ((yj - yi) || 1e-30) + xi);\n\n        if (intersect) inside = !inside;\n    }\n\n    return inside;\n}\n\n// Compute an interior point (seed) for each hole ring\nfunction holeIndicesToHoleList(\n    pointlist: number[],\n    holeIndices: number[]\n): number[]\n{\n    const seeds: number[] = [];\n    const totalPoints = pointlist.length / 2;\n\n    // Build ring start indices: outer ring starts at 0, each hole starts at holeIndices[k]\n    const ringStarts: number[] = [...holeIndices];\n\n    // For each hole ring, compute [start, end] range in the combined pointlist\n    for (let h = 0; h < ringStarts.length; h++)\n    {\n        const start = ringStarts[h];\n        const end = (h + 1 < ringStarts.length) ? (ringStarts[h + 1] - 1) : (totalPoints - 1);\n\n        if (end <= start) continue; // empty or invalid ring\n\n        // Extract ring points as a flat array\n        const ring: number[] = [];\n        for (let i = start; i <= end; i++)\n        {\n            ring.push(pointlist[i * 2], pointlist[i * 2 + 1]);\n        }\n\n        // Compute centroid (average) as initial seed\n        let cx = 0; let cy = 0;\n        for (let i = 0; i < ring.length; i += 2)\n        {\n            cx += ring[i];\n            cy += ring[i + 1];\n        }\n        cx /= (ring.length / 2);\n        cy /= (ring.length / 2);\n\n        // If centroid is not inside, gently nudge towards ring[0]\n        if (!pointInPolygon(cx, cy, ring))\n        {\n            const vx = ring[0] - cx;\n            const vy = ring[1] - cy;\n            const len = Math.hypot(vx, vy) || 1;\n            // Move a small step towards the ring and try again\n            cx += (vx / len) * 1e-3;\n            cy += (vy / len) * 1e-3;\n\n            // If still not inside, take mid-point of first edge and nudge inward\n            if (!pointInPolygon(cx, cy, ring))\n            {\n                cx = (ring[0] + ring[2]) * 0.5;\n                cy = (ring[1] + ring[3]) * 0.5;\n                cx += 1e-3;\n                cy += 1e-3;\n            }\n        }\n\n        seeds.push(cx, cy);\n    }\n\n    return seeds;\n}\n\n/**\n * @param points\n * @param holes\n * @param vertices\n * @param verticesStride\n * @param verticesOffset\n * @param indices\n * @param indicesOffset\n * @internal\n */\nexport function triangulateWithHoles(\n    points: number[],\n    holeIndices: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangle = getTriangleInstance();\n\n    if (!triangle)\n    {\n        console.error('Triangle-wasm not initialized');\n\n        return;\n    }\n\n    // Convert hole indices to hole list coordinates\n    const holelist = holeIndices.length > 0\n        ? holeIndicesToHoleList(points, holeIndices)\n        : [];\n\n    const numPoints = points.length / 2;\n\n    // Build segment list PER RING (outer boundary + each hole), not across all points\n    // Rings are: [0 .. ringStarts[0]-1] as outer, then each hole ring: [ringStarts[k] .. nextStart-1]\n    const segmentlist: number[] = [];\n    const ringStarts: number[] = holeIndices.length > 0 ? [0, ...holeIndices] : [0];\n\n    for (let r = 0; r < ringStarts.length; r++)\n    {\n        const start = ringStarts[r];\n        let end = (r + 1 < ringStarts.length) ? (ringStarts[r + 1] - 1) : (numPoints - 1);\n\n        // If ring explicitly repeats first vertex at the end, drop the duplicate\n        if (end > start)\n        {\n            const sx = points[start * 2];\n            const sy = points[start * 2 + 1];\n            const ex = points[end * 2];\n            const ey = points[end * 2 + 1];\n            if (sx === ex && sy === ey) end -= 1;\n        }\n\n        const ringCount = (end - start + 1);\n\n        if (ringCount <= 1) continue; // skip degenerate rings\n\n        for (let i = start; i < end; i++)\n        {\n            segmentlist.push(i, i + 1);\n        }\n        // close the ring\n        segmentlist.push(end, start);\n    }\n\n    // Create input/output objects using triangle-wasm's makeIO function\n    const input = triangle.makeIO({\n        pointlist: points,\n        segmentlist,\n        holelist,\n    });\n\n    const output = triangle.makeIO();\n\n    try\n    {\n    // Triangulate with switches: p=PSLG, z=zero-based indexing, Q=quiet (default)\n    // Do NOT enable quality to avoid Steiner points; we need indices to reference original points\n    triangle.triangulate({}, input, output);\n\n        console.log('Triangle output:', {\n            numTriangles: output.numberoftriangles,\n            numCorners: output.numberofcorners,\n            hasTrianglelist: !!output.trianglelist,\n            trianglelistLength: output.trianglelist?.length,\n        });\n\n        if (!output.trianglelist || output.trianglelist.length === 0)\n        {\n            console.error(\"Triangle failed to generate triangles!\");\n            console.error('Input was:', { numPoints, numSegments: segmentlist.length / 2, numHoles: holelist.length / 2 });\n            return;\n        }\n\n\n        console.log(\"triangulating :D\")\n        // Write triangulated indices\n        for (let i = 0; i < output.trianglelist.length; i += 3)\n        {\n            indices[indicesOffset++] = output.trianglelist[i] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 1] + verticesOffset;\n            indices[indicesOffset++] = output.trianglelist[i + 2] + verticesOffset;\n        }\n\n        // Write vertices\n        let index = verticesOffset * verticesStride;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[index] = points[i];\n            vertices[index + 1] = points[i + 1];\n\n            index += verticesStride;\n        }\n    }\n    finally\n    {\n        // Clean up allocated memory\n        // Use 'destroy all' (true) on input to free shared pointers, then free output normally\n        // This avoids double-free issues since Triangle copies pointers from input to output\n        triangle.freeIO(input, true);\n        triangle.freeIO(output);\n    }\n}\n\n"],"names":["getTriangleInstance"],"mappings":"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"}